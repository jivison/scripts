#! /usr/bin/python3

import sys
import os
import subprocess
import json

class bcolors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

passed_args = sys.argv

try:
    play = passed_args[1]
except IndexError:
    play = ""

args = passed_args[2:]

class SceneError(Exception):
    def __init__(self, play=None, scene=None, blank=False):
        if not blank:
            super().__init__(f"play {play}: {bcolors.FAIL}scene '{scene}' not found{bcolors.ENDC}")
        else:
            super().__init__(f"play {play}: {bcolors.WARNING}please enter a scene{bcolors.ENDC}")

class PlayError(Exception):
    def __init__(self, blank=False, play=None):
        if not blank:
            super().__init__(f"play: {bcolors.FAIL}play '{play}' not found{bcolors.ENDC}")
        else:
            super().__init__(f"play: {bcolors.WARNING}please enter a play{bcolors.ENDC}")



class Plays:

    def __init__(self, play, input_args):
        method = getattr(self, play, None)

        if play == "":
            raise PlayError(True)
        elif method == None and play != "":
            raise PlayError(play=play)
        else:
            if callable(method):
                method(input_args)

    def git(self, arguments):
        path = subprocess.check_output("pwd", shell=True)

        try:
            scene = arguments[0]
        except IndexError:
            raise SceneError(play, blank=True)

        if scene == "scp":
            msg = "'" + arguments[1] + "'"


            try:
                branch = arguments[2]
            except Exception:
                branch = "master"
                print("**Warning, pushing to master**\nPress enter to confirm...")
                input()

            print("Gitting with msg: {} | and branch: {}".format(msg, branch))

            os.system("git add --all")
            os.system(f"git commit -am {msg}")
            os.system(f"git push origin {branch}")
            
            # os.system("ansible-playbook --extra-vars=\"msg={} branch={} repo_path={}\" ~/.playbooks/git.yaml -f 10".format(msg, branch, path))

        elif scene == "test":
            print("Yup, this command works!")

        elif scene == "clone":

            user = arguments[1]
            repo = arguments[2]

            os.system("git clone https://github.com/{}/{}.git".format(user, repo))

        elif scene == "started":

            repo = arguments[1]

            os.system(f"mkdir {repo}")

            gitignore = '''
*.private
*.private/
            '''

            os.system(f"cd {repo}; git init")

            os.system(f"echo '{gitignore}' > {repo}/.gitignore")
            os.system(f"echo '# {repo}' > {repo}/readme.md")

            repojson = {
                "name" : repo
            }

            os.system(f"cd {repo}; curl -u 'MatteCatte' https://api.github.com/user/repos -d '{json.dumps(repojson)}'")

            os.system(f"cd {repo}; git add .gitignore")
            os.system(f"cd {repo}; git add readme.md")

            os.system(f"cd {repo}; git commit -m 'initial commit'")
            os.system(f"cd {repo}; git remote add origin https://github.com/MatteCatte/{repo}.git")
            os.system(f"cd {repo}; git push -u origin master")

        else:
            raise SceneError(play, scene)

    def trivia(self, arguments):
        from trivia.trivia import ask, get_questions, TriviaError, arg_whitelist, vetArgValue, printHelp

        params = {"amount" : 5}

        askQ = True

        try:
            for argument in arguments:
                if "=" in argument:
                    if argument.partition("=")[0].strip() in arg_whitelist and vetArgValue(argument.partition("=")[0].strip(), argument.partition("=")[2].strip()):
                        params[argument.partition("=")[0].strip()] = argument.partition("=")[2].strip()
                    else:
                        raise TriviaError("bad_argument", argument=argument.partition("=")[0].strip())
                
                if argument == "--help":
                    printHelp()
                    askQ = False
                    break
        
        except TriviaError as tr_e:
            print(tr_e)
            quit()
        

        if askQ:
            try: 
                ask(get_questions(params))
            except TriviaError as e:
                print(e)

    def update(self, arguments):
        os.system("sudo dnf -y update")
        os.system("sudo dnf -y upgrade")
    
    # def

    


try:
    go = Plays(play, args)
except SceneError as sc_e:
    print(sc_e)
except PlayError as pl_e:
    print(pl_e)

# DEPRECITATED
    # def genhosts(self, arguments):
        
    #     try:

    #         genfile = arguments[0]         

    #         print("Generating from file: {}".format(genfile))
    #         os.system("ansible-playbook ~/.playbooks/genhosts.yaml -e '@{}' -f 10".format(genfile))

    #     except IndexError:
    #         print("Generating from default configuration...")
    #         os.system("ansible-playbook ~/.playbooks/genhosts.yaml -e '@~/.playbooks/vars/genhosts_vars.yaml'")